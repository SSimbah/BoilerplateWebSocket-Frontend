import Head from "next/head";
import {
  Button,
  Flex,
  Text,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  FormControl,
  FormLabel,
  Select,
  Input,
  useToast,
  Image,
  Menu, 
  MenuButton, 
  MenuList, 
  MenuItem,
  Box,
  Spinner
} from "@chakra-ui/react";
import { RiArrowDownSLine  } from "react-icons/ri";
import React, { useEffect, useState, useRef } from "react";
import { useRouter } from 'next/router';
import axios from 'axios';
import { RiEditBoxLine } from "react-icons/ri"

function Dashboard() {
    // const { isOpen, onOpen, onClose } = useDisclosure();
    const [isLoading, setIsLoading] = useState(true);
    const [user, setUser] = useState(null);
    const logoutChannel = useRef(null);
  
    const toast = useToast();
    const router = useRouter();
  
    useEffect(() => {
      const checkAuth = async () => {
        const userData = localStorage.getItem('user');
        if (!userData) {
          router.push('/');
        } else {
          const parsedUser = JSON.parse(userData);
          setUser(parsedUser);
          
        //   try {
        //     // Fetch gateways for the user
        //     const response = await axios.get(`http://localhost:5000/gateways/user/${parsedUser.id}`);
        //     setGateways(response.data);
        //   } catch (error) {
        //     console.error('Error fetching gateways:', error);
        //     toast({
        //       title: "Error",
        //       description: "Failed to fetch gateways",
        //       status: "error",
        //       duration: 3000,
        //       isClosable: true,
        //     });
        //   }
          
          setIsLoading(false);
        }
      };
      
      checkAuth();
    }, [router, toast]);
  
    // Add this useEffect to initialize BroadcastChannel
    useEffect(() => {
      // Initialize the broadcast channel
      logoutChannel.current = new BroadcastChannel('logout_channel');
      
      // Listen for logout messages from other tabs
      logoutChannel.current.onmessage = (event) => {
        if (event.data === 'logout') {
          localStorage.removeItem('user');
          router.push('/');
        }
      };
  
      // Cleanup on unmount
      return () => {
        if (logoutChannel.current) {
          logoutChannel.current.close();
        }
      };
    }, [router]);
  
    // If still loading or no user, don't render the dashboard
    if (isLoading) {
      return (
        <Flex height="100vh" alignItems="center" justifyContent="center" direction="column" gap={4}>
          <Spinner
            thickness="4px"
            speed="0.65s"
            emptyColor="gray.200"
            color="blue.500"
            size="lg"
          />
          <Text fontSize="lg" color="gray.600">Loading...</Text>
        </Flex>
      );
    }

    // Update the logout handler
  const handleLogout = async () => {
    try {
      const response = await fetch('http://localhost:5000/users/logout', {
        method: 'POST',
        credentials: 'include',
      });

      if (response.ok) {
        // Broadcast logout message to other tabs
        logoutChannel.current.postMessage('logout');
        
        // Logout current tab
        localStorage.removeItem('user');
        router.push('/');
      }
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  
  return (
    <>
        <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <Box backgroundColor="gray.100" height="100vh">
      <Flex 
        as="header" 
        position="sticky"
        top="0px"
        zIndex="1"
        width="100%" 
        height="70px"
        p="10px"
        justifyContent={["flex-end", "flex-end", "space-between", "space-between"]}
        backdropFilter="blur(10px)"
        bgColor="background: rgba(220, 220, 220, 0.2);"
        boxShadow="sm"
        >
        <Image src='https://placehold.co/500x100' alt='logo'display={["none", "none","block","block"]}></Image>
        <Flex
            justifyContent="space-between"
            alignItems="center"
            >
            <Flex
                flexDirection="column"
                m={6}
                >
                <Text fontWeight="medium" color='green.700'>Username: {user.username}</Text>
                <Text fontWeight="medium" color="blackAlpha.500">Role: {user.role}</Text>
            </Flex>
            <Menu>
            <MenuButton 
                as={Button} 
                variant="outline" 
                size="sm"
                padding="4px"
            >
                <RiArrowDownSLine size="24px" />
            </MenuButton>
            <MenuList>
                <MenuItem>Profile</MenuItem>
                <MenuItem color="red" onClick={handleLogout}>Sign Out</MenuItem>
            </MenuList>
            </Menu>
        </Flex>
      </Flex>
      </Box>
    </>
  )
}

export default Dashboard;